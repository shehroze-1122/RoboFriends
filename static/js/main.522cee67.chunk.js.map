{"version":3,"sources":["components/Card.js","components/CardArray.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","constants.js","containers/App.js","actions.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardArray","robots","isPending","error","length","color","map","user","SearchBox","searchChange","Fragment","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","getRobots","searchValue","searchEntry","filteredRobots","filter","robot","toLowerCase","includes","connect","changeSearchField","assignRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","root","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.522cee67.chunk.js","sourcesContent":["import React from 'react';\r\n//Basic card component\r\nconst Card = ({id,name,email})=>{\r\n    return(\r\n        <div className=\"bg-light-green tc grow pointer br3 bw2 dib pa3 ma3 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt='Robot'/>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\nimport { CircularProgress } from '@material-ui/core/index.js';\r\n\r\nconst CardArray = ({robots, isPending, error})=>{\r\n    if(error !== ''){\r\n        return (<p className=\"tc white mt-10\">Couldn't connect to the server. Please check your internet connection </p>)\r\n    }\r\n\r\n    else if(!isPending & robots.length===0){\r\n        return (<p className=\"tc white mt-10\">No result found</p>)\r\n    }\r\n    return isPending? (<div className=\"center\"> <CircularProgress color=\"secondary\" /></div>):(\r\n        <div>\r\n            {\r\n                robots.map((user)=>{\r\n                return <Card key={user.id} id={user.id} name={user.name} email = {user.email}/>;\r\n                })\r\n            }\r\n        </div>\r\n\r\n    );\r\n};\r\nexport default CardArray;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchChange})=>{\r\n    return(\r\n        <React.Fragment>\r\n            <div className=\"pa3\">\r\n             <input className=\"pa2 bg-light-blue ba b--blue br2\" type=\"search\" placeholder=\"Search your Robot Friends\" onChange={searchChange}/>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n    return (\r\n        <React.Fragment>\r\n            <div style={{overflowY:'scroll', border: '1px solid #96ccff', height: '800px'}}>\r\n                {props.children}\r\n            </div>\r\n        </React.Fragment>);\r\n}\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError:false\r\n        }\r\n    }\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true});\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return (<h1>Ooops, we ran into a problem. Couldn't get the robots</h1>);\r\n        }else{\r\n            return this.props.children;\r\n        }   \r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","import React,{Component} from 'react';\r\nimport CardArray from '../components/CardArray.js';\r\nimport SearchBox from '../components/SearchBox.js';\r\nimport Scroll from '../components/Scroll.js';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\nimport { setSearchField, fetchRobots } from '../actions';\r\n\r\n\r\nconst mapStateToProps=(state)=>{\r\n    return {\r\n        searchValue: state.changeSearchField.searchValue, \r\n        robots: state.assignRobots.robots,\r\n        error: state.assignRobots.error,\r\n        isPending: state.assignRobots.isPending\r\n    };\r\n}\r\nconst mapDispatchToProps=(dispatch)=>{\r\n    return {\r\n        searchEntry: (event)=>dispatch(setSearchField(event.target.value)),\r\n        getRobots: () => dispatch(fetchRobots())\r\n    };\r\n}\r\n\r\nclass App extends Component{\r\n\r\n    componentDidMount(){\r\n        this.props.getRobots();\r\n    }\r\n\r\n    render(){\r\n        const { searchValue,searchEntry, robots, isPending, error } = this.props;\r\n        const filteredRobots = robots.filter((robot)=>{\r\n            return robot.name.toLowerCase().includes(searchValue.toLowerCase());\r\n        });\r\n\r\n        return(\r\n            <React.Fragment>\r\n                <div className=\"tc\">\r\n                    <h1>RoboFriends</h1>\r\n                    <SearchBox searchChange={searchEntry}/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardArray robots={filteredRobots} isPending={isPending} error={error} />\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>   \r\n            </React.Fragment>\r\n        );\r\n        \r\n    }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED} from \"./constants\";\r\n\r\nexport const setSearchField = (text)=>{\r\n    return({\r\n    type:CHANGE_SEARCH_FIELD,\r\n    payload:text\r\n})};\r\n\r\nexport const fetchRobots = () => dispatch =>{\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data=>dispatch({type: REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n    .catch(error=>dispatch({type: REQUEST_ROBOTS_FAILED, payload:error}))\r\n}","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED} from \"./constants\";\r\n\r\nconst initialStateSearch ={\r\n    searchValue : ''\r\n}\r\n\r\nexport const changeSearchField = (state=initialStateSearch,action={})=>{\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({},state,{searchValue:action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots ={\r\n    robots : [],\r\n    isPending: true,\r\n    error:''\r\n\r\n}\r\n\r\nexport const assignRobots = (state=initialStateRobots, action={})=>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({},state,{isPending:true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({},state,{isPending:false, robots: action.payload})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({},state,{isPending:false, error: action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App.js';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport  thunkMiddleware from 'redux-thunk';\r\nimport {changeSearchField, assignRobots } from './reducers.js'\r\n// import { createLogger } from 'redux-logger';\r\nimport 'tachyons'\r\n\r\n// const logger = createLogger();\r\n// pass logger to createStore if you wanna see it in action in console\r\n\r\nconst root = combineReducers({changeSearchField, assignRobots})\r\nconst store = createStore(root, applyMiddleware(thunkMiddleware));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n      <App/>\r\n  </Provider>\r\n,document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}