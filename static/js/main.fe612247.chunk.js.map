{"version":3,"sources":["components/Card.js","components/CardArray.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardArray","robots","length","map","user","SearchBox","searchChange","Fragment","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","getRobots","searchValue","searchEntry","isPending","filteredRobots","filter","robot","toLowerCase","includes","CircularProgress","color","connect","changeSearchField","assignRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","root","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fe612247.chunk.js","sourcesContent":["import React from 'react';\r\n//Basic card component\r\nconst Card = ({id,name,email})=>{\r\n    return(\r\n        <div className=\"bg-light-green tc grow pointer br3 bw2 dib pa3 ma3 shadow-5\">\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt='Robot'/>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\nconst CardArray = ({robots})=>{\r\n\r\n    if(robots.length===0){\r\n        return (<p className=\"tc white mt-10\">No result found</p>)\r\n    }\r\n    return(\r\n        <div>\r\n            {\r\n                robots.map((user)=>{\r\n                return <Card key={user.id} id={user.id} name={user.name} email = {user.email}/>;\r\n                })\r\n            }\r\n        </div>\r\n\r\n    );\r\n};\r\nexport default CardArray;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchChange})=>{\r\n    return(\r\n        <React.Fragment>\r\n            <div className=\"pa3\">\r\n             <input className=\"pa2 bg-light-blue ba b--blue br2\" type=\"search\" placeholder=\"Search your Robot Friends\" onChange={searchChange}/>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props)=>{\r\n    return (\r\n        <React.Fragment>\r\n            <div style={{overflowY:'scroll', border: '1px solid #96ccff', height: '800px'}}>\r\n                {props.children}\r\n            </div>\r\n        </React.Fragment>);\r\n}\r\nexport default Scroll;","import React,{Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            hasError:false\r\n        }\r\n    }\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true});\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return (<h1>Ooops, we ran into a problem. Couldn't get the robots</h1>);\r\n        }else{\r\n            return this.props.children;\r\n        }   \r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";","import React,{Component} from 'react';\r\nimport CardArray from '../components/CardArray.js';\r\nimport SearchBox from '../components/SearchBox.js';\r\nimport Scroll from '../components/Scroll.js';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { connect } from 'react-redux';\r\nimport './App.css';\r\nimport { setSearchField, fetchRobots } from '../actions';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n\r\nconst mapStateToProps=(state)=>{\r\n    return {\r\n        searchValue: state.changeSearchField.searchValue, \r\n        robots: state.assignRobots.robots,\r\n        error: state.assignRobots.error,\r\n        isPending: state.assignRobots.isPending\r\n    };\r\n}\r\nconst mapDispatchToProps=(dispatch)=>{\r\n    return {\r\n        searchEntry: (event)=>dispatch(setSearchField(event.target.value)),\r\n        getRobots: () => dispatch(fetchRobots())\r\n    };\r\n}\r\n\r\nclass App extends Component{\r\n\r\n    componentDidMount(){\r\n        this.props.getRobots();\r\n    }\r\n\r\n    render(){\r\n        const { searchValue,searchEntry, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter((robot)=>{\r\n            return robot.name.toLowerCase().includes(searchValue.toLowerCase());\r\n        });\r\n        if(isPending){\r\n            return (<div className=\"center\">\r\n                        <CircularProgress color=\"secondary\" />\r\n                    </div>);\r\n        }\r\n\r\n        else{\r\n            return(\r\n                <React.Fragment>\r\n                    <div className=\"tc\">\r\n                        <h1>RoboFriends</h1>\r\n                        <SearchBox searchChange={searchEntry}/>\r\n                        <Scroll>\r\n                            <ErrorBoundary>\r\n                                <CardArray robots={filteredRobots}/>\r\n                            </ErrorBoundary>\r\n                        </Scroll>\r\n                    </div>   \r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED} from \"./constants\";\r\n\r\nexport const setSearchField = (text)=>{\r\n    return({\r\n    type:CHANGE_SEARCH_FIELD,\r\n    payload:text\r\n})};\r\n\r\nexport const fetchRobots = () => dispatch =>{\r\n    dispatch({type: REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data=>dispatch({type: REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n    .catch(error=>dispatch({type: REQUEST_ROBOTS_FAILED, payload:error}))\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED} from \"./constants\";\r\n\r\nconst initialStateSearch ={\r\n    searchValue : ''\r\n}\r\n\r\nexport const changeSearchField = (state=initialStateSearch,action={})=>{\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({},state,{searchValue:action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots ={\r\n    robots : [],\r\n    isPending: true,\r\n    error:''\r\n\r\n}\r\n\r\nexport const assignRobots = (state=initialStateRobots, action={})=>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({},state,{isPending:true})\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({},state,{isPending:false, robots: action.payload})\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({},state,{isPending:false, error: action.payload})\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App.js';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport  thunkMiddleware from 'redux-thunk';\r\nimport {changeSearchField, assignRobots } from './reducers.js'\r\n// import { createLogger } from 'redux-logger';\r\nimport 'tachyons'\r\n\r\n// const logger = createLogger();\r\n// pass logger to createStore if you wanna see it in action in console\r\n\r\nconst root = combineReducers({changeSearchField, assignRobots})\r\nconst store = createStore(root, applyMiddleware(thunkMiddleware));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n      <App/>\r\n  </Provider>\r\n,document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}